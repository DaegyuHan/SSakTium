version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "22181:2181"

  kafka1:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  kafka2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "19093:19093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9093,EXTERNAL://localhost:19093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL


  kafka3:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "19094:19094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9094,EXTERNAL://localhost:19094
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8989:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  redis-node1:
      image: redis:latest
      command: [ "redis-server", "/redis/redis.conf" ]
      volumes:
        - redis_data_7000:/data
        - ./redis/redis_7000.conf:/redis/redis.conf
      ports:
        - "6379:7000"
      networks:
        - redis_network

  redis-node2:
        image: redis:latest
        command: [ "redis-server", "/redis/redis.conf" ]
        volumes:
          - redis_data_7001:/data
          - ./redis/redis_7001.conf:/redis/redis.conf
        ports:
          - "7001:7001"
        networks:
          - redis_network

  redis-node3:
        image: redis:latest
        command: [ "redis-server", "/redis/redis.conf" ]
        volumes:
          - redis_data_7002:/data
          - ./redis/redis_7002.conf:/redis/redis.conf
        ports:
          - "7002:7002"
        networks:
          - redis_network

  redis-node4:
        image: redis:latest
        command: [ "redis-server", "/redis/redis.conf" ]
        volumes:
          - redis_data_7003:/data
          - ./redis/redis_7003.conf:/redis/redis.conf
        ports:
          - "7003:7003"
        networks:
          - redis_network

  redis-node5:
        image: redis:latest
        command: [ "redis-server", "/redis/redis.conf" ]
        volumes:
          - redis_data_7004:/data
          - ./redis/redis_7004.conf:/redis/redis.conf
        ports:
          - "7004:7004"
        networks:
          - redis_network

  redis-node6:
        image: redis:latest
        command: [ "redis-server", "/redis/redis.conf" ]
        volumes:
          - redis_data_7005:/data
          - ./redis/redis_7005.conf:/redis/redis.conf
        ports:
          - "7005:7005"
        networks:
          - redis_network

  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    ports:
      - "5540:5540" # RedisInsight 웹 UI 포트
    networks:
      - redis_network
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3
      - redis-node4
      - redis-node5
      - redis-node6
    environment:
      - NODE_ENV=production
    entrypoint: [ "/bin/sh", "-c" ]
    command: >
      "
      sleep 10;
      echo 'yes' |
      redis-cli --cluster create
      redis-node1:7000 redis-node2:7001 redis-node3:7002
      redis-node4:7003 redis-node5:7004 redis-node6:7005
      --cluster-replicas 1
      "

volumes:
  redis_data_7000:
  redis_data_7001:
  redis_data_7002:
  redis_data_7003:
  redis_data_7004:
  redis_data_7005:
    driver: local

networks:
  redis_network: # Redis와 RedisInsight 간 통신을 위한 네트워크
    driver: bridge