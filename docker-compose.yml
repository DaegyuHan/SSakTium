
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "22181:2181"

  kafka1:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  kafka2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "19093:19093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9093,EXTERNAL://localhost:19093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL


  kafka3:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "19094:19094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9094,EXTERNAL://localhost:19094
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8989:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  redis0:
    image: redis:latest
    hostname: redis0
    container_name: redis0
    ports:
      - 7000:7000
    command: redis-server --port 7000 --cluster-enabled yes --cluster-announce-hostname localhost --cluster-preferred-endpoint-type hostname
    networks:
      - redis-cluster

  redis1:
    image: redis:latest
    hostname: redis1
    container_name: redis1
    ports:
      - 7001:7001
    command: redis-server --port 7001 --cluster-enabled yes --cluster-announce-hostname localhost --cluster-preferred-endpoint-type hostname
    networks:
      - redis-cluster

  redis2:
    image: redis:latest
    hostname: redis2
    container_name: redis2
    ports:
      - 7002:7002
    command: redis-server --port 7002 --cluster-enabled yes --cluster-announce-hostname localhost --cluster-preferred-endpoint-type hostname
    networks:
      - redis-cluster

  redis3:
    image: redis:latest
    hostname: redis3
    container_name: redis3
    ports:
      - 7003:7003
    command: redis-server --port 7003 --cluster-enabled yes --cluster-announce-hostname localhost --cluster-preferred-endpoint-type hostname
    networks:
      - redis-cluster

  redis4:
    image: redis:latest
    hostname: redis4
    container_name: redis4
    ports:
      - 7004:7004
    command: redis-server --port 7004 --cluster-enabled yes --cluster-announce-hostname localhost --cluster-preferred-endpoint-type hostname
    networks:
      - redis-cluster

  redis5:
    image: redis:latest
    hostname: redis5
    container_name: redis5
    ports:
      - 7005:7005
    command: redis-server --port 7005 --cluster-enabled yes --cluster-announce-hostname localhost --cluster-preferred-endpoint-type hostname
    networks:
      - redis-cluster

  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    ports:
      - "5540:5540" # RedisInsight 웹 UI 포트
    networks:
      - redis-cluster
    depends_on:
      - redis0
      - redis1
      - redis2
      - redis3
      - redis4
      - redis5
    environment:
      - NODE_ENV=production
    entrypoint: [ "/bin/sh", "-c" ]
    command: >
      "
      docker exec -it redis0 bash
      redis-cli --cluster check redis0:7000;
      redis-cli --cluster check redis1:7001;
      redis-cli --cluster check redis2:7002;
      redis-cli --cluster check redis3:7003;
      redis-cli --cluster check redis4:7004;
      redis-cli --cluster check redis5:7005;
      redis-cli --cluster create redis0:7000 redis1:7001 redis2:7002 redis3:7003 redis4:7004 redis5:7005 --cluster-replicas 1;
      "

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - node.name=es01
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - ELASTIC_PASSWORD=${ES_PASSWORD}
      - xpack.security.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    command: >
      /bin/sh -c "if [ ! -d plugins/analysis-nori ]; then 
      bin/elasticsearch-plugin install analysis-nori; 
      fi; 
      /usr/local/bin/docker-entrypoint.sh"

  kibana:
      image: docker.elastic.co/kibana/kibana:7.17.0
      container_name: kibana
      environment:
        - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
        - ELASTICSEARCH_USERNAME=${ES_USERNAME}
        - ELASTICSEARCH_PASSWORD=${ES_PASSWORD}
      ports:
        - 5601:5601
      depends_on:
        - elasticsearch
      volumes:
        - kibana-data:/usr/share/kibana/data


volumes:
  redis_data_7000:
  redis_data_7001:
  redis_data_7002:
  redis_data_7003:
  redis_data_7004:
  redis_data_7005:
    driver: local
  grafana-data:
    driver: local
  es-data:
    driver: local
  kibana-data:
    driver: local

networks:
  redis-cluster: